{"version":3,"file":"storefront-api-client.min.js","sources":["../../../graphql-client/dist/graphql-client/constants.mjs","../../../graphql-client/dist/graphql-client/utilities.mjs","../../../graphql-client/dist/graphql-client/graphql-client.mjs","../../../graphql-client/dist/api-client-utilities/validations.mjs","../../../graphql-client/dist/api-client-utilities/api-versions.mjs","../../../src/constants.ts","../../../src/storefront-api-client.ts","../../../src/validations.ts"],"sourcesContent":["const CLIENT = \"GraphQL Client\";\nconst MIN_RETRIES = 0;\nconst MAX_RETRIES = 3;\n\nexport { CLIENT, MAX_RETRIES, MIN_RETRIES };\n//# sourceMappingURL=constants.mjs.map\n","import { MIN_RETRIES, MAX_RETRIES } from './constants.mjs';\n\nfunction getErrorMessage(error) {\n    return error instanceof Error ? error.message : JSON.stringify(error);\n}\nfunction validateRetries({ client, retries, }) {\n    if (retries !== undefined &&\n        (typeof retries !== \"number\" ||\n            retries < MIN_RETRIES ||\n            retries > MAX_RETRIES)) {\n        throw new Error(`${client}: The provided \"retries\" value (${retries}) is invalid - it cannot be less than ${MIN_RETRIES} or greater than ${MAX_RETRIES}`);\n    }\n}\n\nexport { getErrorMessage, validateRetries };\n//# sourceMappingURL=utilities.mjs.map\n","import { CLIENT } from './constants.mjs';\nimport { validateRetries, getErrorMessage } from './utilities.mjs';\n\nconst GQL_API_ERROR = `${CLIENT}: An error occurred while fetching from the API. Review 'graphQLErrors' for details.`;\nconst UNEXPECTED_CONTENT_TYPE_ERROR = `${CLIENT}: Response returned unexpected Content-Type:`;\nconst CONTENT_TYPES = {\n    json: \"application/json\",\n    multipart: \"multipart/mixed\",\n};\nconst RETRY_WAIT_TIME = 1000;\nconst RETRIABLE_STATUS_CODES = [429, 503];\nfunction createGraphQLClient({ headers, url, fetchApi = fetch, retries = 0, logger, }) {\n    validateRetries({ client: CLIENT, retries });\n    const config = {\n        headers,\n        url,\n        retries,\n    };\n    const clientLogger = generateClientLogger(logger);\n    const httpFetch = generateHttpFetch(fetchApi, clientLogger);\n    const fetch = generateFetch(httpFetch, config);\n    const request = generateRequest(fetch);\n    return {\n        config,\n        fetch,\n        request,\n    };\n}\nasync function sleep(waitTime) {\n    return new Promise((resolve) => setTimeout(resolve, waitTime));\n}\nasync function processJSONResponse(response) {\n    const { errors, data, extensions } = await response.json();\n    return {\n        ...(data ? { data } : {}),\n        ...(extensions ? { extensions } : {}),\n        ...(errors || !data\n            ? {\n                errors: {\n                    networkStatusCode: response.status,\n                    message: errors\n                        ? GQL_API_ERROR\n                        : `${CLIENT}: An unknown error has occurred. The API did not return a data object or any errors in its response.`,\n                    ...(errors ? { graphQLErrors: errors } : {}),\n                },\n            }\n            : {}),\n    };\n}\nfunction generateClientLogger(logger) {\n    return (logContent) => {\n        if (logger) {\n            logger(logContent);\n        }\n    };\n}\nfunction generateHttpFetch(fetchApi, clientLogger) {\n    const httpFetch = async (requestParams, count, maxRetries) => {\n        const nextCount = count + 1;\n        const maxTries = maxRetries + 1;\n        let response;\n        try {\n            response = await fetchApi(...requestParams);\n            clientLogger({\n                type: \"HTTP-Response\",\n                content: {\n                    requestParams,\n                    response,\n                },\n            });\n            if (!response.ok &&\n                RETRIABLE_STATUS_CODES.includes(response.status) &&\n                nextCount <= maxTries) {\n                throw new Error();\n            }\n            return response;\n        }\n        catch (error) {\n            if (nextCount <= maxTries) {\n                await sleep(RETRY_WAIT_TIME);\n                clientLogger({\n                    type: \"HTTP-Retry\",\n                    content: {\n                        requestParams,\n                        lastResponse: response,\n                        retryAttempt: count,\n                        maxRetries,\n                    },\n                });\n                return httpFetch(requestParams, nextCount, maxRetries);\n            }\n            throw new Error(`${CLIENT}:${maxRetries > 0\n                ? ` Attempted maximum number of ${maxRetries} network retries. Last message -`\n                : \"\"} ${getErrorMessage(error)}`);\n        }\n    };\n    return httpFetch;\n}\nfunction generateFetch(httpFetch, { url, headers, retries }) {\n    return async (operation, options = {}) => {\n        const { variables, headers: overrideHeaders, url: overrideUrl, retries: overrideRetries, } = options;\n        const body = JSON.stringify({\n            query: operation,\n            variables,\n        });\n        validateRetries({ client: CLIENT, retries: overrideRetries });\n        const fetchParams = [\n            overrideUrl ?? url,\n            {\n                method: \"POST\",\n                headers: {\n                    ...headers,\n                    ...overrideHeaders,\n                },\n                body,\n            },\n        ];\n        return httpFetch(fetchParams, 1, overrideRetries ?? retries);\n    };\n}\nfunction generateRequest(fetch) {\n    return async (...props) => {\n        try {\n            const response = await fetch(...props);\n            const { status, statusText } = response;\n            const contentType = response.headers.get(\"content-type\") || \"\";\n            if (!response.ok) {\n                return {\n                    errors: {\n                        networkStatusCode: status,\n                        message: statusText,\n                    },\n                };\n            }\n            if (!contentType.includes(CONTENT_TYPES.json)) {\n                return {\n                    errors: {\n                        networkStatusCode: status,\n                        message: `${UNEXPECTED_CONTENT_TYPE_ERROR} ${contentType}`,\n                    },\n                };\n            }\n            return processJSONResponse(response);\n        }\n        catch (error) {\n            return {\n                errors: {\n                    message: getErrorMessage(error),\n                },\n            };\n        }\n    };\n}\n\nexport { createGraphQLClient, generateClientLogger };\n//# sourceMappingURL=graphql-client.mjs.map\n","function validateDomainAndGetStoreUrl({ client, storeDomain, }) {\n    try {\n        if (!storeDomain || typeof storeDomain !== \"string\") {\n            throw new Error();\n        }\n        const trimmedDomain = storeDomain.trim();\n        const protocolUrl = trimmedDomain.startsWith(\"http\")\n            ? trimmedDomain\n            : `https://${trimmedDomain}`;\n        const url = new URL(protocolUrl);\n        url.protocol = \"https\";\n        return url.origin;\n    }\n    catch (_error) {\n        throw new Error(`${client}: a valid store domain (\"${storeDomain}\") must be provided`);\n    }\n}\nfunction validateApiVersion({ client, currentSupportedApiVersions, apiVersion, logger, }) {\n    const versionError = `${client}: the provided apiVersion (\"${apiVersion}\")`;\n    const supportedVersion = `Current supported API versions: ${currentSupportedApiVersions.join(\", \")}`;\n    if (!apiVersion || typeof apiVersion !== \"string\") {\n        throw new Error(`${versionError} is invalid. ${supportedVersion}`);\n    }\n    const trimmedApiVersion = apiVersion.trim();\n    if (!currentSupportedApiVersions.includes(trimmedApiVersion)) {\n        if (logger) {\n            logger({\n                type: \"UNSUPPORTED_API_VERSION\",\n                content: {\n                    apiVersion,\n                    supportedApiVersions: currentSupportedApiVersions,\n                },\n            });\n        }\n        else {\n            console.warn(`${versionError} is deprecated or not supported. ${supportedVersion}`);\n        }\n    }\n}\n\nexport { validateApiVersion, validateDomainAndGetStoreUrl };\n//# sourceMappingURL=validations.mjs.map\n","function getQuarterMonth(quarter) {\n    const month = quarter * 3 - 2;\n    return month === 10 ? month : `0${month}`;\n}\nfunction getPrevousVersion(year, quarter, nQuarter) {\n    const versionQuarter = quarter - nQuarter;\n    if (versionQuarter <= 0) {\n        return `${year - 1}-${getQuarterMonth(versionQuarter + 4)}`;\n    }\n    return `${year}-${getQuarterMonth(versionQuarter)}`;\n}\nfunction getCurrentApiVersion() {\n    const date = new Date();\n    const month = date.getUTCMonth();\n    const year = date.getUTCFullYear();\n    const quarter = Math.floor(month / 3 + 1);\n    return {\n        year,\n        quarter,\n        version: `${year}-${getQuarterMonth(quarter)}`,\n    };\n}\nfunction getCurrentSupportedApiVersions() {\n    const { year, quarter, version: currentVersion } = getCurrentApiVersion();\n    const nextVersion = quarter === 4\n        ? `${year + 1}-01`\n        : `${year}-${getQuarterMonth(quarter + 1)}`;\n    return [\n        getPrevousVersion(year, quarter, 3),\n        getPrevousVersion(year, quarter, 2),\n        getPrevousVersion(year, quarter, 1),\n        currentVersion,\n        nextVersion,\n        \"unstable\",\n    ];\n}\n\nexport { getCurrentApiVersion, getCurrentSupportedApiVersions };\n//# sourceMappingURL=api-versions.mjs.map\n",null,null,null],"names":["CLIENT","MIN_RETRIES","MAX_RETRIES","getErrorMessage","error","Error","message","JSON","stringify","validateRetries","client","retries","undefined","GQL_API_ERROR","UNEXPECTED_CONTENT_TYPE_ERROR","CONTENT_TYPES","json","multipart","RETRY_WAIT_TIME","RETRIABLE_STATUS_CODES","createGraphQLClient","headers","url","fetchApi","fetch","logger","config","clientLogger","logContent","generateClientLogger","httpFetch","async","requestParams","count","maxRetries","nextCount","maxTries","response","type","content","ok","includes","status","waitTime","Promise","resolve","setTimeout","sleep","lastResponse","retryAttempt","generateHttpFetch","operation","options","variables","overrideHeaders","overrideUrl","overrideRetries","body","query","fetchParams","method","generateFetch","request","props","statusText","contentType","get","errors","data","extensions","networkStatusCode","graphQLErrors","processJSONResponse","generateRequest","validateApiVersion","currentSupportedApiVersions","apiVersion","versionError","supportedVersion","join","trimmedApiVersion","trim","supportedApiVersions","console","warn","getQuarterMonth","quarter","month","getPrevousVersion","year","nQuarter","versionQuarter","getCurrentSupportedApiVersions","version","currentVersion","date","Date","getUTCMonth","getUTCFullYear","Math","floor","getCurrentApiVersion","nextVersion","DEFAULT_CONTENT_TYPE","storeDomain","publicAccessToken","privateAccessToken","clientName","customFetchApi","clientFetchApi","storeUrl","trimmedDomain","protocolUrl","startsWith","URL","protocol","origin","_error","validateDomainAndGetStoreUrl","baseApiVersionValidationParams","validateRequiredAccessTokens","window","validatePrivateAccessTokenUsage","apiUrlFormatter","defaultApiVersion","urlApiVersion","generateApiUrlFormatter","Accept","apiUrl","graphqlClient","getHeaders","customHeaders","generateGetHeader","getApiUrl","propApiVersion","generateGetApiUrl","getGQLClientRequestProps","push","generateGetGQLClientProps","requestProps","Object","freeze"],"mappings":"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"}