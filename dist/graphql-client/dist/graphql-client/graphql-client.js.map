{"version":3,"file":"graphql-client.js","sources":["../../../../../graphql-client/dist/graphql-client/graphql-client.mjs"],"sourcesContent":["import { CLIENT } from './constants.mjs';\nimport { validateRetries, getErrorMessage } from './utilities.mjs';\n\nconst GQL_API_ERROR = `${CLIENT}: An error occurred while fetching from the API. Review 'graphQLErrors' for details.`;\nconst UNEXPECTED_CONTENT_TYPE_ERROR = `${CLIENT}: Response returned unexpected Content-Type:`;\nconst CONTENT_TYPES = {\n    json: \"application/json\",\n    multipart: \"multipart/mixed\",\n};\nconst RETRY_WAIT_TIME = 1000;\nconst RETRIABLE_STATUS_CODES = [429, 503];\nfunction createGraphQLClient({ headers, url, fetchApi = fetch, retries = 0, logger, }) {\n    validateRetries({ client: CLIENT, retries });\n    const config = {\n        headers,\n        url,\n        retries,\n    };\n    const clientLogger = generateClientLogger(logger);\n    const httpFetch = generateHttpFetch(fetchApi, clientLogger);\n    const fetch = generateFetch(httpFetch, config);\n    const request = generateRequest(fetch);\n    return {\n        config,\n        fetch,\n        request,\n    };\n}\nasync function sleep(waitTime) {\n    return new Promise((resolve) => setTimeout(resolve, waitTime));\n}\nasync function processJSONResponse(response) {\n    const { errors, data, extensions } = await response.json();\n    return {\n        ...(data ? { data } : {}),\n        ...(extensions ? { extensions } : {}),\n        ...(errors || !data\n            ? {\n                errors: {\n                    networkStatusCode: response.status,\n                    message: errors\n                        ? GQL_API_ERROR\n                        : `${CLIENT}: An unknown error has occurred. The API did not return a data object or any errors in its response.`,\n                    ...(errors ? { graphQLErrors: errors } : {}),\n                },\n            }\n            : {}),\n    };\n}\nfunction generateClientLogger(logger) {\n    return (logContent) => {\n        if (logger) {\n            logger(logContent);\n        }\n    };\n}\nfunction generateHttpFetch(fetchApi, clientLogger) {\n    const httpFetch = async (requestParams, count, maxRetries) => {\n        const nextCount = count + 1;\n        const maxTries = maxRetries + 1;\n        let response;\n        try {\n            response = await fetchApi(...requestParams);\n            clientLogger({\n                type: \"HTTP-Response\",\n                content: {\n                    requestParams,\n                    response,\n                },\n            });\n            if (!response.ok &&\n                RETRIABLE_STATUS_CODES.includes(response.status) &&\n                nextCount <= maxTries) {\n                throw new Error();\n            }\n            return response;\n        }\n        catch (error) {\n            if (nextCount <= maxTries) {\n                await sleep(RETRY_WAIT_TIME);\n                clientLogger({\n                    type: \"HTTP-Retry\",\n                    content: {\n                        requestParams,\n                        lastResponse: response,\n                        retryAttempt: count,\n                        maxRetries,\n                    },\n                });\n                return httpFetch(requestParams, nextCount, maxRetries);\n            }\n            throw new Error(`${CLIENT}:${maxRetries > 0\n                ? ` Attempted maximum number of ${maxRetries} network retries. Last message -`\n                : \"\"} ${getErrorMessage(error)}`);\n        }\n    };\n    return httpFetch;\n}\nfunction generateFetch(httpFetch, { url, headers, retries }) {\n    return async (operation, options = {}) => {\n        const { variables, headers: overrideHeaders, url: overrideUrl, retries: overrideRetries, } = options;\n        const body = JSON.stringify({\n            query: operation,\n            variables,\n        });\n        validateRetries({ client: CLIENT, retries: overrideRetries });\n        const fetchParams = [\n            overrideUrl ?? url,\n            {\n                method: \"POST\",\n                headers: {\n                    ...headers,\n                    ...overrideHeaders,\n                },\n                body,\n            },\n        ];\n        return httpFetch(fetchParams, 1, overrideRetries ?? retries);\n    };\n}\nfunction generateRequest(fetch) {\n    return async (...props) => {\n        try {\n            const response = await fetch(...props);\n            const { status, statusText } = response;\n            const contentType = response.headers.get(\"content-type\") || \"\";\n            if (!response.ok) {\n                return {\n                    errors: {\n                        networkStatusCode: status,\n                        message: statusText,\n                    },\n                };\n            }\n            if (!contentType.includes(CONTENT_TYPES.json)) {\n                return {\n                    errors: {\n                        networkStatusCode: status,\n                        message: `${UNEXPECTED_CONTENT_TYPE_ERROR} ${contentType}`,\n                    },\n                };\n            }\n            return processJSONResponse(response);\n        }\n        catch (error) {\n            return {\n                errors: {\n                    message: getErrorMessage(error),\n                },\n            };\n        }\n    };\n}\n\nexport { createGraphQLClient, generateClientLogger };\n//# sourceMappingURL=graphql-client.mjs.map\n"],"names":["CLIENT","validateRetries","getErrorMessage"],"mappings":"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"}